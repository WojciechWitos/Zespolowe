{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programowanie zespo\u0142owe # Projektem naszej grupy by\u0142o stworzenie aplikacji w pythonie ze \u015brodowiskiem graficznym, kt\u00f3ra zawiera w sobie kilka podstawowych funkcjonalno\u015bci. Na samym pocz\u0105tku stworzyli\u015bmy kolejne wycinki aplikacji, a p\u00f3\u017aniej zaj\u0119li\u015bmy si\u0119 ich \u0142\u0105czeniem. Jedyn\u0105 funkcjonalno\u015bci\u0105, kt\u00f3rej nie uda\u0142o si\u0119 nam zaimplementowa\u0107 do tego samego systemu graficznego by\u0142 kalkulator. Dlatego te\u017c kalkulator zosta\u0142 zaimplementowany jako osobny modu\u0142, z du\u017co lepiej wygl\u0105daj\u0105cym graficznym interfejsem. Lista spotka\u0144: # 14.03.2022 # Pierwsze spotkanie polega\u0142o na wymy\u015bleniu tematu projektu, szukaniu g\u0142\u00f3wnych materia\u0142\u00f3w, czego konkretnie mo\u017cemy potrzebowa\u0107 oraz u\u017cy\u0107. Ka\u017cdy z nas stara\u0142 si\u0119 do\u0142o\u017cy\u0107 cegie\u0142k\u0119 do zamys\u0142u projektu. Stwierdzili\u015bmy, \u017ce przed nast\u0119pnym spotkaniem, ka\u017cdy z nas indywidualnie poszuka dodatkowych materia\u0142\u00f3w i pomy\u015bli nad czym chcia\u0142by si\u0119 skupi\u0107 oraz zrobi\u0107 w projekcie. Wszystkie przydatne strony wysy\u0142ali\u015bmy na kanale Discord, kt\u00f3ry zosta\u0142 stworzony w celu realizacji tego projektu. 30.03.2022 # Na kolejnym spotkaniu dopi\u0119li\u015bmy wszystkie formalno\u015bci zwi\u0105zane z teoretycznymi zagadnieniami. Ka\u017cdy z nas powiedzia\u0142 czym konkretnie chcia\u0142by si\u0119 zaj\u0105\u0107 w projekcie. Na tej zasadzie podzielili\u015bmy si\u0119 obowi\u0105zkami. Przede wszystkim starali\u015bmy si\u0119 o ich r\u00f3wny podzia\u0142, \u017ceby nie by\u0142o sytuacji, w kt\u00f3rej jedna z os\u00f3b b\u0119dzie musia\u0142a zrobi\u0107 du\u017co wi\u0119cej ni\u017c inna. 11.04.2022 # Kolejno po dw\u00f3ch tygodniach pokazywali\u015bmy swoje efekty pracy oraz dzielili\u015bmy si\u0119 wiedz\u0105, ka\u017cdy z nas t\u0142umaczy\u0142 w jaki spos\u00f3b zrobi\u0142 konkretn\u0105 cz\u0119\u015b\u0107 kodu. Spotkanie mia\u0142o na celu om\u00f3wienie rzeczy, kt\u00f3re zaimplementowali\u015bmy i w razie jakich\u015b problem\u00f3w, wszyscy wsp\u00f3lnie pr\u00f3bowali\u015bmy znale\u017a\u0107 rozwi\u0105zanie. 25.04.2022 # W celu dalszego rozwoju projektu, cz\u0119\u015b\u0107 grupy musia\u0142a poczeka\u0107 a\u017c reszta doko\u0144czy implementacje swoich komponent\u00f3w. Omawiali\u015bmy w jaki spos\u00f3b chcemy po\u0142\u0105czy\u0107 aplikacj\u0119 oraz co powinno zosta\u0107 do niej jeszcze zmienione lub dodane. Tak jak przy poprzednich spotkaniach, omawiali\u015bmy efekty pracy i w razie problem\u00f3w starali\u015bmy si\u0119 rozwi\u0105zywa\u0107 je wsp\u00f3lnie. 09.05.2022 # Po wst\u0119pnej pr\u00f3bie po\u0142\u0105czenia wszystkich element\u00f3w w jedn\u0105 ca\u0142o\u015b\u0107, pojawi\u0142y si\u0119 pierwsze trudniejsze problemy do rozwi\u0105zania. Na tym spotkaniu starali\u015bmy si\u0119 uzgodni\u0107 co jest g\u0142\u00f3wnym czynnikiem, dla kt\u00f3rego nie byli\u015bmy w stanie tego zrobi\u0107. Na tym spotkaniu wszyscy wsp\u00f3lnie zacz\u0119li\u015bmy tworzy\u0107 dokumentacj\u0119 naszej aplikacji oraz opis przebiegu naszego projektu. 23.05.2022 # Na tym etapie aplikacja zosta\u0142a po\u0142\u0105czona w jedn\u0105 ca\u0142o\u015b\u0107, lecz nie spodziewali\u015bmy si\u0119 tego rodzaju b\u0142\u0119d\u00f3w, kt\u00f3re przysporzy\u0142y nam wiele problem\u00f3w i wszyscy wsp\u00f3lnie pr\u00f3bowali\u015bmy je rozwi\u0105za\u0107, co w efekcie da\u0142o nam dzia\u0142aj\u0105c\u0105 aplikacj\u0119 z paroma b\u0142\u0119dami, z kt\u00f3rymi walczyli\u015bmy, lecz nie by\u0142y one du\u017co \u0142atwiejsze w naprawie. 06.06.2022 # Na ostatnim spotkaniu wykonali\u015bmy finalne testy naszej aplikacji, starali\u015bmy si\u0119 sprawdzi\u0107 j\u0105 pod ka\u017cdym wzgl\u0119dem, niekt\u00f3re problemy niestety nie zosta\u0142y usuni\u0119te ze wzgl\u0119du na ich z\u0142o\u017cono\u015b\u0107. Nast\u0119pnie doko\u0144czyli\u015bmy dokumentacj\u0119, kt\u00f3ra by\u0142a czasoch\u0142onna oraz napisali\u015bmy plan projektu, gdy\u017c stwierdzili\u015bmy, \u017ce stworzymy go na sam koniec.","title":"Opis glowny"},{"location":"#programowanie-zespoowe","text":"Projektem naszej grupy by\u0142o stworzenie aplikacji w pythonie ze \u015brodowiskiem graficznym, kt\u00f3ra zawiera w sobie kilka podstawowych funkcjonalno\u015bci. Na samym pocz\u0105tku stworzyli\u015bmy kolejne wycinki aplikacji, a p\u00f3\u017aniej zaj\u0119li\u015bmy si\u0119 ich \u0142\u0105czeniem. Jedyn\u0105 funkcjonalno\u015bci\u0105, kt\u00f3rej nie uda\u0142o si\u0119 nam zaimplementowa\u0107 do tego samego systemu graficznego by\u0142 kalkulator. Dlatego te\u017c kalkulator zosta\u0142 zaimplementowany jako osobny modu\u0142, z du\u017co lepiej wygl\u0105daj\u0105cym graficznym interfejsem.","title":"Programowanie zespo\u0142owe"},{"location":"#lista-spotkan","text":"","title":"Lista spotka\u0144:"},{"location":"#14032022","text":"Pierwsze spotkanie polega\u0142o na wymy\u015bleniu tematu projektu, szukaniu g\u0142\u00f3wnych materia\u0142\u00f3w, czego konkretnie mo\u017cemy potrzebowa\u0107 oraz u\u017cy\u0107. Ka\u017cdy z nas stara\u0142 si\u0119 do\u0142o\u017cy\u0107 cegie\u0142k\u0119 do zamys\u0142u projektu. Stwierdzili\u015bmy, \u017ce przed nast\u0119pnym spotkaniem, ka\u017cdy z nas indywidualnie poszuka dodatkowych materia\u0142\u00f3w i pomy\u015bli nad czym chcia\u0142by si\u0119 skupi\u0107 oraz zrobi\u0107 w projekcie. Wszystkie przydatne strony wysy\u0142ali\u015bmy na kanale Discord, kt\u00f3ry zosta\u0142 stworzony w celu realizacji tego projektu.","title":"14.03.2022"},{"location":"#30032022","text":"Na kolejnym spotkaniu dopi\u0119li\u015bmy wszystkie formalno\u015bci zwi\u0105zane z teoretycznymi zagadnieniami. Ka\u017cdy z nas powiedzia\u0142 czym konkretnie chcia\u0142by si\u0119 zaj\u0105\u0107 w projekcie. Na tej zasadzie podzielili\u015bmy si\u0119 obowi\u0105zkami. Przede wszystkim starali\u015bmy si\u0119 o ich r\u00f3wny podzia\u0142, \u017ceby nie by\u0142o sytuacji, w kt\u00f3rej jedna z os\u00f3b b\u0119dzie musia\u0142a zrobi\u0107 du\u017co wi\u0119cej ni\u017c inna.","title":"30.03.2022"},{"location":"#11042022","text":"Kolejno po dw\u00f3ch tygodniach pokazywali\u015bmy swoje efekty pracy oraz dzielili\u015bmy si\u0119 wiedz\u0105, ka\u017cdy z nas t\u0142umaczy\u0142 w jaki spos\u00f3b zrobi\u0142 konkretn\u0105 cz\u0119\u015b\u0107 kodu. Spotkanie mia\u0142o na celu om\u00f3wienie rzeczy, kt\u00f3re zaimplementowali\u015bmy i w razie jakich\u015b problem\u00f3w, wszyscy wsp\u00f3lnie pr\u00f3bowali\u015bmy znale\u017a\u0107 rozwi\u0105zanie.","title":"11.04.2022"},{"location":"#25042022","text":"W celu dalszego rozwoju projektu, cz\u0119\u015b\u0107 grupy musia\u0142a poczeka\u0107 a\u017c reszta doko\u0144czy implementacje swoich komponent\u00f3w. Omawiali\u015bmy w jaki spos\u00f3b chcemy po\u0142\u0105czy\u0107 aplikacj\u0119 oraz co powinno zosta\u0107 do niej jeszcze zmienione lub dodane. Tak jak przy poprzednich spotkaniach, omawiali\u015bmy efekty pracy i w razie problem\u00f3w starali\u015bmy si\u0119 rozwi\u0105zywa\u0107 je wsp\u00f3lnie.","title":"25.04.2022"},{"location":"#09052022","text":"Po wst\u0119pnej pr\u00f3bie po\u0142\u0105czenia wszystkich element\u00f3w w jedn\u0105 ca\u0142o\u015b\u0107, pojawi\u0142y si\u0119 pierwsze trudniejsze problemy do rozwi\u0105zania. Na tym spotkaniu starali\u015bmy si\u0119 uzgodni\u0107 co jest g\u0142\u00f3wnym czynnikiem, dla kt\u00f3rego nie byli\u015bmy w stanie tego zrobi\u0107. Na tym spotkaniu wszyscy wsp\u00f3lnie zacz\u0119li\u015bmy tworzy\u0107 dokumentacj\u0119 naszej aplikacji oraz opis przebiegu naszego projektu.","title":"09.05.2022"},{"location":"#23052022","text":"Na tym etapie aplikacja zosta\u0142a po\u0142\u0105czona w jedn\u0105 ca\u0142o\u015b\u0107, lecz nie spodziewali\u015bmy si\u0119 tego rodzaju b\u0142\u0119d\u00f3w, kt\u00f3re przysporzy\u0142y nam wiele problem\u00f3w i wszyscy wsp\u00f3lnie pr\u00f3bowali\u015bmy je rozwi\u0105za\u0107, co w efekcie da\u0142o nam dzia\u0142aj\u0105c\u0105 aplikacj\u0119 z paroma b\u0142\u0119dami, z kt\u00f3rymi walczyli\u015bmy, lecz nie by\u0142y one du\u017co \u0142atwiejsze w naprawie.","title":"23.05.2022"},{"location":"#06062022","text":"Na ostatnim spotkaniu wykonali\u015bmy finalne testy naszej aplikacji, starali\u015bmy si\u0119 sprawdzi\u0107 j\u0105 pod ka\u017cdym wzgl\u0119dem, niekt\u00f3re problemy niestety nie zosta\u0142y usuni\u0119te ze wzgl\u0119du na ich z\u0142o\u017cono\u015b\u0107. Nast\u0119pnie doko\u0144czyli\u015bmy dokumentacj\u0119, kt\u00f3ra by\u0142a czasoch\u0142onna oraz napisali\u015bmy plan projektu, gdy\u017c stwierdzili\u015bmy, \u017ce stworzymy go na sam koniec.","title":"06.06.2022"},{"location":"Calc/","text":"Kalkulator # Code # import tkinter as tk #czcionka LARGE_FONT_STYLE = (\"Arial\", 40, \"bold\") SMALL_FONT_STYLE = (\"Arial\", 16) DIGITS_FONT_STYLE = (\"Arial\", 24, \"bold\") DEFAULT_FONT_STYLE = (\"Arial\", 20) #kolorki :) OFF_GRAY = \"#272727\" DISPLAY_GRAY = \"#515151\" GRAY_BLUE = \"#7C9979\" LIGHT_GRAY = \"#303030\" GRAY_RED = \"#B97777\" LABEL_COLOR = \"#C5C5C5\" class Calculator: def __init__(self): self.window = tk.Tk() self.window.geometry(\"400x700\") #wymiary self.window.attributes('-alpha',0.9) #przezroczystosc self.window.resizable(0, 0) #brak mozliwosci zmiany rozmiarow okna self.window.title(\"Calculator\") #tytul self.total_expression = \"\" #dzialanie self.current_expression = \"\" #wynik // biezaca liczba self.display_frame = self.create_display_frame() self.buttons_frame = self.create_buttons_frame() self.total_label, self.label = self.create_display_labels() #tablica przyciskow numerycznych self.digits = { 7: (1, 1), 8: (1, 2), 9: (1, 3), 4: (2, 1), 5: (2, 2), 6: (2, 3), 1: (3, 1), 2: (3, 2), 3: (3, 3), 0: (4, 2), '.': (4, 1) } #tablica przyciskow operacyjnych self.operations = {\"/\": \"\\u00F7\", \"*\": \"\\u00D7\", \"-\": \"-\", \"+\": \"+\"} self.buttons_frame.rowconfigure(0, weight=1) for x in range(1, 5): #zmiana rozmiaru przyciskow self.buttons_frame.rowconfigure(x, weight=1) self.buttons_frame.columnconfigure(x, weight=1) self.create_digit_buttons() self.create_operator_buttons() self.create_special_buttons() def create_display_frame(self): frame = tk.Frame(self.window, height=221, bg=LIGHT_GRAY) frame.pack(expand=True, fill=\"both\") return frame def create_buttons_frame(self): frame = tk.Frame(self.window) frame.pack(expand=True, fill=\"both\") return frame def create_display_labels(self): total_label = tk.Label(self.display_frame, text=self.total_expression, anchor=tk.E, bg=DISPLAY_GRAY, fg=LABEL_COLOR, padx=24, font=SMALL_FONT_STYLE) total_label.pack(expand=True, fill='both') label = tk.Label(self.display_frame, text=self.current_expression, anchor=tk.E, bg=DISPLAY_GRAY, fg=LABEL_COLOR, padx=24, font=LARGE_FONT_STYLE) label.pack(expand=True, fill='both') return total_label, label def create_digit_buttons(self): for digit, grid_value in self.digits.items(): button = tk.Button(self.buttons_frame, text=str(digit), bg=LIGHT_GRAY, fg=LABEL_COLOR, font=DIGITS_FONT_STYLE, borderwidth=0, command=lambda x=digit: self.add_to_expression(x)) button.grid(row=grid_value[0], column=grid_value[1], sticky=tk.NSEW) def create_special_buttons(self): self.create_clear_button() self.create_equals_button() def create_operator_buttons(self): i = 0 for operator, symbol in self.operations.items(): button = tk.Button(self.buttons_frame, text=symbol, bg=OFF_GRAY, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE, borderwidth=0, command=lambda x=operator: self.append_operator(x)) button.grid(row=i, column=4, sticky=tk.NSEW) i += 1 def create_clear_button(self): button = tk.Button(self.buttons_frame, text=\"C\", bg=GRAY_RED, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE, borderwidth=0, command=self.clear) button.grid(row=0, column=1, columnspan=3, sticky=tk.NSEW) def create_equals_button(self): button = tk.Button(self.buttons_frame, text=\"=\", bg=GRAY_BLUE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE, borderwidth=0, command=self.validate_expresion) button.grid(row=4, column=3, columnspan=2, sticky=tk.NSEW) def add_to_expression(self, value): self.current_expression += str(value) self.update_label() def append_operator(self, operator): self.current_expression += operator self.total_expression += self.current_expression self.current_expression = \"\" self.update_total_label() self.update_label() def clear(self): self.current_expression = \"\" self.total_expression = \"\" self.update_label() self.update_total_label() def update_total_label(self): expression = self.total_expression for operator, symbol in self.operations.items(): expression = expression.replace(operator, f' {symbol} ') self.total_label.config(text=expression) def update_label(self): #ograniczenie ilosci cyfr na wyswietlaczu self.label.config(text=self.current_expression[:12]) def validate_expresion(self): #walidacje obliczen self.total_expression += self.current_expression self.update_total_label() try: self.current_expression = str(eval(self.total_expression)) self.total_expression = \"\" except Exception as e: self.current_expression = \"Error\" finally: self.update_label() def run(self): self.window.mainloop() if __name__ == \"__main__\": calc = Calculator() calc.run()","title":"Kalkulator code"},{"location":"Calc/#kalkulator","text":"","title":"Kalkulator"},{"location":"Calc/#code","text":"import tkinter as tk #czcionka LARGE_FONT_STYLE = (\"Arial\", 40, \"bold\") SMALL_FONT_STYLE = (\"Arial\", 16) DIGITS_FONT_STYLE = (\"Arial\", 24, \"bold\") DEFAULT_FONT_STYLE = (\"Arial\", 20) #kolorki :) OFF_GRAY = \"#272727\" DISPLAY_GRAY = \"#515151\" GRAY_BLUE = \"#7C9979\" LIGHT_GRAY = \"#303030\" GRAY_RED = \"#B97777\" LABEL_COLOR = \"#C5C5C5\" class Calculator: def __init__(self): self.window = tk.Tk() self.window.geometry(\"400x700\") #wymiary self.window.attributes('-alpha',0.9) #przezroczystosc self.window.resizable(0, 0) #brak mozliwosci zmiany rozmiarow okna self.window.title(\"Calculator\") #tytul self.total_expression = \"\" #dzialanie self.current_expression = \"\" #wynik // biezaca liczba self.display_frame = self.create_display_frame() self.buttons_frame = self.create_buttons_frame() self.total_label, self.label = self.create_display_labels() #tablica przyciskow numerycznych self.digits = { 7: (1, 1), 8: (1, 2), 9: (1, 3), 4: (2, 1), 5: (2, 2), 6: (2, 3), 1: (3, 1), 2: (3, 2), 3: (3, 3), 0: (4, 2), '.': (4, 1) } #tablica przyciskow operacyjnych self.operations = {\"/\": \"\\u00F7\", \"*\": \"\\u00D7\", \"-\": \"-\", \"+\": \"+\"} self.buttons_frame.rowconfigure(0, weight=1) for x in range(1, 5): #zmiana rozmiaru przyciskow self.buttons_frame.rowconfigure(x, weight=1) self.buttons_frame.columnconfigure(x, weight=1) self.create_digit_buttons() self.create_operator_buttons() self.create_special_buttons() def create_display_frame(self): frame = tk.Frame(self.window, height=221, bg=LIGHT_GRAY) frame.pack(expand=True, fill=\"both\") return frame def create_buttons_frame(self): frame = tk.Frame(self.window) frame.pack(expand=True, fill=\"both\") return frame def create_display_labels(self): total_label = tk.Label(self.display_frame, text=self.total_expression, anchor=tk.E, bg=DISPLAY_GRAY, fg=LABEL_COLOR, padx=24, font=SMALL_FONT_STYLE) total_label.pack(expand=True, fill='both') label = tk.Label(self.display_frame, text=self.current_expression, anchor=tk.E, bg=DISPLAY_GRAY, fg=LABEL_COLOR, padx=24, font=LARGE_FONT_STYLE) label.pack(expand=True, fill='both') return total_label, label def create_digit_buttons(self): for digit, grid_value in self.digits.items(): button = tk.Button(self.buttons_frame, text=str(digit), bg=LIGHT_GRAY, fg=LABEL_COLOR, font=DIGITS_FONT_STYLE, borderwidth=0, command=lambda x=digit: self.add_to_expression(x)) button.grid(row=grid_value[0], column=grid_value[1], sticky=tk.NSEW) def create_special_buttons(self): self.create_clear_button() self.create_equals_button() def create_operator_buttons(self): i = 0 for operator, symbol in self.operations.items(): button = tk.Button(self.buttons_frame, text=symbol, bg=OFF_GRAY, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE, borderwidth=0, command=lambda x=operator: self.append_operator(x)) button.grid(row=i, column=4, sticky=tk.NSEW) i += 1 def create_clear_button(self): button = tk.Button(self.buttons_frame, text=\"C\", bg=GRAY_RED, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE, borderwidth=0, command=self.clear) button.grid(row=0, column=1, columnspan=3, sticky=tk.NSEW) def create_equals_button(self): button = tk.Button(self.buttons_frame, text=\"=\", bg=GRAY_BLUE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE, borderwidth=0, command=self.validate_expresion) button.grid(row=4, column=3, columnspan=2, sticky=tk.NSEW) def add_to_expression(self, value): self.current_expression += str(value) self.update_label() def append_operator(self, operator): self.current_expression += operator self.total_expression += self.current_expression self.current_expression = \"\" self.update_total_label() self.update_label() def clear(self): self.current_expression = \"\" self.total_expression = \"\" self.update_label() self.update_total_label() def update_total_label(self): expression = self.total_expression for operator, symbol in self.operations.items(): expression = expression.replace(operator, f' {symbol} ') self.total_label.config(text=expression) def update_label(self): #ograniczenie ilosci cyfr na wyswietlaczu self.label.config(text=self.current_expression[:12]) def validate_expresion(self): #walidacje obliczen self.total_expression += self.current_expression self.update_total_label() try: self.current_expression = str(eval(self.total_expression)) self.total_expression = \"\" except Exception as e: self.current_expression = \"Error\" finally: self.update_label() def run(self): self.window.mainloop() if __name__ == \"__main__\": calc = Calculator() calc.run()","title":"Code"},{"location":"MainCode/","text":"G\u0142\u00f3wna strona projektu # Klasa SampleApp # Klasa w kt\u00f3rej od g\u00f3ry zadeklarowane s\u0105: warto\u015bci czcionki, p\u0119tla s\u0142u\u017c\u0105c\u0105 do wyboru wy\u015bwietlanej klasy przez GUI oraz deklaracj\u0119 kontenera odpowiedzialnego za uk\u0142ad GUI Klasa ta wy\u015bwietlana jest przy uruchomieniu programu, zawiera w sobie przyciski nawigacyjne do ka\u017cdej z klas. Klasa StartPage # Klasa ta wy\u015bwietlana jest przy uruchomieniu programu, zawiera w sobie przyciski nawigacyjne do ka\u017cdej z klas. Klasa Calculator # Klasa ta s\u0142u\u017cy do wywo\u0142ania pliku Calculator.exe, kt\u00f3ry wykonuje si\u0119 na bazie pliku Calculator.py Do stworzenia pliku .exe z pliku o rozszerzeniu .py u\u017cyli\u015bmy polecenia pyinstaller --onefile Calculator.py . Klasa ToDoList # Klasa wy\u015bwietla list\u0119 zaplanowanych przez u\u017cytkownika czynno\u015bci. Przycisk add , powoduje, \u017ce elementy s\u0105 dodawane do listy tak jak w przypadku list pythonowych. Przycisk delete pozwala na usuni\u0119cie wybranej za pomoc\u0105 kursora czynno\u015bci. Przycisk cross powoduj\u0119 zmian\u0119 koloru czcionki imituj\u0105c skre\u015blenie go z listy. Przycisk uncorss adekwatnie pozwala przywr\u00f3ci\u0107 poprzedni kolor czcionki. Klasa Weather # Klasa pobiera plik formatu .json z podanego linku, odpowiada za to polecenie urlib.request.urlopena nast\u0119pnie odczytuje dane u\u017cywaj\u0105c .read po czym przy u\u017cyciu biblioteki pandas oraz polecenia json_normalize, normalizuje jego wy\u015bwietlanie usuwaj\u0105c numer indexu. Dodatkowo ka\u017cda klasa zawiera panel pozwalaj\u0105cy na nawigacj\u0119 pomi\u0119dzy klasami. Code # import tkinter as tk from tkinter import ANCHOR, CENTER, RIGHT, LEFT, BOTH, END, Entry, Listbox, Scrollbar, font as tkfont import os import urllib, json from click import command from numpy import pad import requests from pandas.io.json import json_normalize class SampleApp(tk.Tk): def __init__(self, *args, **kwargs): tk.Tk.__init__(self, *args, **kwargs) self.title_font = tkfont.Font(family='Helvetica', size=18, weight=\"bold\", slant=\"italic\") container = tk.Frame(self) container.pack(side=\"top\", fill=\"both\", expand=True) container.grid_rowconfigure(0, weight=1) container.grid_columnconfigure(0, weight=1) self.frames = {} for F in (StartPage, Calculator, ToDoList, Weather): page_name = F.__name__ frame = F(parent=container, controller=self) self.frames[page_name] = frame frame.grid(row=0, column=0, sticky=\"nsew\") self.show_frame(\"StartPage\") def show_frame(self, page_name): frame = self.frames[page_name] frame.tkraise() class StartPage(tk.Frame): def __init__(self, parent, controller): tk.Frame.__init__(self, parent) self.controller = controller self.controller.title('Programowanie Zespolowe') self.controller.state('zoomed') label = tk.Label(self, text=\"Programowanie Zespo\u0142owe \\n Semestr 6 Informatyka Stosowana \\n\\n Grupa: \\n Wojciech Witos, \\nKacper Ruszczyk, \\nMicha\u0142 Trond, \\nJakub Kozubek, \\nSzymon Skoczylas\", font=controller.title_font) label.place(relx=0.5, rely=0.25, anchor=CENTER) button1 = tk.Button(self, text=\"Go to To Do List\", command=lambda: controller.show_frame(\"ToDoList\")) button2 = tk.Button(self, text=\"Go to Weather Page \", command=lambda: controller.show_frame(\"Weather\")) button3 = tk.Button(self, text=\"Go to Calculator\", command=lambda: controller.show_frame(\"Calculator\")) button1.place(relx=0.45, rely=0.05, anchor=CENTER) button2.place(relx=0.5, rely=0.05, anchor=CENTER) button3.place(relx=0.55, rely=0.05, anchor=CENTER) class Calculator(tk.Frame): def __init__(self, parent, controller): tk.Frame.__init__(self, parent) self.controller = controller label = tk.Label(self, text=\"This is calculator page\", font=controller.title_font) label.place(relx=0.5, rely=0.05, anchor=CENTER) def open_calculator(): os.system('E:\\Programowanie\\Zespolowe\\dist\\Calculator.exe') button4 = tk.Button(self, text ='Open caluclator', command = open_calculator) button = tk.Button(self, text=\"Go to the start page\", command=lambda: controller.show_frame(\"StartPage\")) button2 = tk.Button(self, text=\"Go to To Do List\", command=lambda: controller.show_frame(\"ToDoList\")) button3 = tk.Button(self, text=\"Go to Weather Page \", command=lambda: controller.show_frame(\"Weather\")) button.place(relx=0.45, rely=0.1, anchor=CENTER) button2.place(relx=0.5, rely=0.1, anchor=CENTER) button3.place(relx=0.55, rely=0.1, anchor=CENTER) button4.place(relx=0.5, rely=0.2, anchor=CENTER) class ToDoList(tk.Frame): def __init__(self, parent, controller): tk.Frame.__init__(self, parent) self.controller = controller frame = tk.Frame(self) frame.pack(pady = 300) list = Listbox(frame, width=25, height=5, bd=0, fg=\"#000000\") list.pack(side=LEFT, fill=BOTH) def delete_item(): list.delete(ANCHOR) def add_item(): list.insert(END, entry.get()) entry.delete(0, END) def cross_item(): list.itemconfig( list.curselection(), fg=\"#c2c2c2\") list.selection_clear(0, END) def uncross_item(): list.itemconfig( list.curselection(), fg=\"#000000\") list.selection_clear(0, END) stuff=[] for item in stuff: list.insert(END, item) scrollbar = Scrollbar(frame) scrollbar.pack(side=RIGHT, fill=BOTH) list.config(yscrollcommand=scrollbar.set) scrollbar.config(command=list.yview) entry = Entry(frame) entry.pack(pady=20) button_frame = tk.Frame(frame) button_frame.pack(pady=20) delete_button=tk.Button(button_frame, text=\"Delete\", command=delete_item) add_button=tk.Button(button_frame, text=\"Add\", command=add_item) cross_button=tk.Button(button_frame, text=\"Cross item\", command=cross_item) uncross_button=tk.Button(button_frame, text=\"Uncross item\", command=uncross_item) delete_button.grid(row=0, column=0) add_button.grid(row=0, column=1) cross_button.grid(row=0, column=2) uncross_button.grid(row=0, column=3) label = tk.Label(self, text=\"This is To Do page\", font=controller.title_font) label.place(relx=0.5, rely=0.05, anchor=CENTER) button = tk.Button(self, text=\"Go to the start page\", command=lambda: controller.show_frame(\"StartPage\")) button1 = tk.Button(self, text=\"Go to Calculator\", command=lambda: controller.show_frame(\"Calculator\")) button3 = tk.Button(self, text=\"Go to Weather Page \", command=lambda: controller.show_frame(\"Weather\")) button.place(relx=0.45, rely=0.1, anchor=CENTER) button1.place(relx=0.5, rely=0.1, anchor=CENTER) button3.place(relx=0.55, rely=0.1, anchor=CENTER) class Weather(tk.Frame): def __init__(self, parent, controller): url = \"https://dor-error-1234.herokuapp.com/weather/Katowice?fbclid=IwAR2Rm6w1OOh6a7_ULdHhHjpbpZzYKnDiBZAwUQiB4njM-4a94JvBu4CcjFw\" response = urllib.request.urlopen(url) data = json.loads(response.read()) reg = json_normalize(data) reg = reg.to_string(index=False) tk.Frame.__init__(self, parent) final = tk.Label(self, text=reg, font=controller.title_font) final.place(relx=0.5, rely=0.2, anchor=CENTER) self.controller = controller label = tk.Label(self, text=\"Weather in Katowice\", font=controller.title_font) label.place(relx=0.5, rely=0.05, anchor=CENTER) button = tk.Button(self, text=\"Go to the start page\", command=lambda: controller.show_frame(\"StartPage\")) button1 = tk.Button(self, text=\"Go to Calculator\", command=lambda: controller.show_frame(\"Calculator\")) button2 = tk.Button(self, text=\"Go to To Do List\", command=lambda: controller.show_frame(\"ToDoList\")) button.place(relx=0.45, rely=0.1, anchor=CENTER) button1.place(relx=0.5, rely=0.1, anchor=CENTER) button2.place(relx=0.55, rely=0.1, anchor=CENTER) if __name__ == \"__main__\": app = SampleApp() app.mainloop()","title":"Main code"},{"location":"MainCode/#gowna-strona-projektu","text":"","title":"G\u0142\u00f3wna strona projektu"},{"location":"MainCode/#klasa-sampleapp","text":"Klasa w kt\u00f3rej od g\u00f3ry zadeklarowane s\u0105: warto\u015bci czcionki, p\u0119tla s\u0142u\u017c\u0105c\u0105 do wyboru wy\u015bwietlanej klasy przez GUI oraz deklaracj\u0119 kontenera odpowiedzialnego za uk\u0142ad GUI Klasa ta wy\u015bwietlana jest przy uruchomieniu programu, zawiera w sobie przyciski nawigacyjne do ka\u017cdej z klas.","title":"Klasa SampleApp"},{"location":"MainCode/#klasa-startpage","text":"Klasa ta wy\u015bwietlana jest przy uruchomieniu programu, zawiera w sobie przyciski nawigacyjne do ka\u017cdej z klas.","title":"Klasa StartPage"},{"location":"MainCode/#klasa-calculator","text":"Klasa ta s\u0142u\u017cy do wywo\u0142ania pliku Calculator.exe, kt\u00f3ry wykonuje si\u0119 na bazie pliku Calculator.py Do stworzenia pliku .exe z pliku o rozszerzeniu .py u\u017cyli\u015bmy polecenia pyinstaller --onefile Calculator.py .","title":"Klasa Calculator"},{"location":"MainCode/#klasa-todolist","text":"Klasa wy\u015bwietla list\u0119 zaplanowanych przez u\u017cytkownika czynno\u015bci. Przycisk add , powoduje, \u017ce elementy s\u0105 dodawane do listy tak jak w przypadku list pythonowych. Przycisk delete pozwala na usuni\u0119cie wybranej za pomoc\u0105 kursora czynno\u015bci. Przycisk cross powoduj\u0119 zmian\u0119 koloru czcionki imituj\u0105c skre\u015blenie go z listy. Przycisk uncorss adekwatnie pozwala przywr\u00f3ci\u0107 poprzedni kolor czcionki.","title":"Klasa ToDoList"},{"location":"MainCode/#klasa-weather","text":"Klasa pobiera plik formatu .json z podanego linku, odpowiada za to polecenie urlib.request.urlopena nast\u0119pnie odczytuje dane u\u017cywaj\u0105c .read po czym przy u\u017cyciu biblioteki pandas oraz polecenia json_normalize, normalizuje jego wy\u015bwietlanie usuwaj\u0105c numer indexu. Dodatkowo ka\u017cda klasa zawiera panel pozwalaj\u0105cy na nawigacj\u0119 pomi\u0119dzy klasami.","title":"Klasa Weather"},{"location":"MainCode/#code","text":"import tkinter as tk from tkinter import ANCHOR, CENTER, RIGHT, LEFT, BOTH, END, Entry, Listbox, Scrollbar, font as tkfont import os import urllib, json from click import command from numpy import pad import requests from pandas.io.json import json_normalize class SampleApp(tk.Tk): def __init__(self, *args, **kwargs): tk.Tk.__init__(self, *args, **kwargs) self.title_font = tkfont.Font(family='Helvetica', size=18, weight=\"bold\", slant=\"italic\") container = tk.Frame(self) container.pack(side=\"top\", fill=\"both\", expand=True) container.grid_rowconfigure(0, weight=1) container.grid_columnconfigure(0, weight=1) self.frames = {} for F in (StartPage, Calculator, ToDoList, Weather): page_name = F.__name__ frame = F(parent=container, controller=self) self.frames[page_name] = frame frame.grid(row=0, column=0, sticky=\"nsew\") self.show_frame(\"StartPage\") def show_frame(self, page_name): frame = self.frames[page_name] frame.tkraise() class StartPage(tk.Frame): def __init__(self, parent, controller): tk.Frame.__init__(self, parent) self.controller = controller self.controller.title('Programowanie Zespolowe') self.controller.state('zoomed') label = tk.Label(self, text=\"Programowanie Zespo\u0142owe \\n Semestr 6 Informatyka Stosowana \\n\\n Grupa: \\n Wojciech Witos, \\nKacper Ruszczyk, \\nMicha\u0142 Trond, \\nJakub Kozubek, \\nSzymon Skoczylas\", font=controller.title_font) label.place(relx=0.5, rely=0.25, anchor=CENTER) button1 = tk.Button(self, text=\"Go to To Do List\", command=lambda: controller.show_frame(\"ToDoList\")) button2 = tk.Button(self, text=\"Go to Weather Page \", command=lambda: controller.show_frame(\"Weather\")) button3 = tk.Button(self, text=\"Go to Calculator\", command=lambda: controller.show_frame(\"Calculator\")) button1.place(relx=0.45, rely=0.05, anchor=CENTER) button2.place(relx=0.5, rely=0.05, anchor=CENTER) button3.place(relx=0.55, rely=0.05, anchor=CENTER) class Calculator(tk.Frame): def __init__(self, parent, controller): tk.Frame.__init__(self, parent) self.controller = controller label = tk.Label(self, text=\"This is calculator page\", font=controller.title_font) label.place(relx=0.5, rely=0.05, anchor=CENTER) def open_calculator(): os.system('E:\\Programowanie\\Zespolowe\\dist\\Calculator.exe') button4 = tk.Button(self, text ='Open caluclator', command = open_calculator) button = tk.Button(self, text=\"Go to the start page\", command=lambda: controller.show_frame(\"StartPage\")) button2 = tk.Button(self, text=\"Go to To Do List\", command=lambda: controller.show_frame(\"ToDoList\")) button3 = tk.Button(self, text=\"Go to Weather Page \", command=lambda: controller.show_frame(\"Weather\")) button.place(relx=0.45, rely=0.1, anchor=CENTER) button2.place(relx=0.5, rely=0.1, anchor=CENTER) button3.place(relx=0.55, rely=0.1, anchor=CENTER) button4.place(relx=0.5, rely=0.2, anchor=CENTER) class ToDoList(tk.Frame): def __init__(self, parent, controller): tk.Frame.__init__(self, parent) self.controller = controller frame = tk.Frame(self) frame.pack(pady = 300) list = Listbox(frame, width=25, height=5, bd=0, fg=\"#000000\") list.pack(side=LEFT, fill=BOTH) def delete_item(): list.delete(ANCHOR) def add_item(): list.insert(END, entry.get()) entry.delete(0, END) def cross_item(): list.itemconfig( list.curselection(), fg=\"#c2c2c2\") list.selection_clear(0, END) def uncross_item(): list.itemconfig( list.curselection(), fg=\"#000000\") list.selection_clear(0, END) stuff=[] for item in stuff: list.insert(END, item) scrollbar = Scrollbar(frame) scrollbar.pack(side=RIGHT, fill=BOTH) list.config(yscrollcommand=scrollbar.set) scrollbar.config(command=list.yview) entry = Entry(frame) entry.pack(pady=20) button_frame = tk.Frame(frame) button_frame.pack(pady=20) delete_button=tk.Button(button_frame, text=\"Delete\", command=delete_item) add_button=tk.Button(button_frame, text=\"Add\", command=add_item) cross_button=tk.Button(button_frame, text=\"Cross item\", command=cross_item) uncross_button=tk.Button(button_frame, text=\"Uncross item\", command=uncross_item) delete_button.grid(row=0, column=0) add_button.grid(row=0, column=1) cross_button.grid(row=0, column=2) uncross_button.grid(row=0, column=3) label = tk.Label(self, text=\"This is To Do page\", font=controller.title_font) label.place(relx=0.5, rely=0.05, anchor=CENTER) button = tk.Button(self, text=\"Go to the start page\", command=lambda: controller.show_frame(\"StartPage\")) button1 = tk.Button(self, text=\"Go to Calculator\", command=lambda: controller.show_frame(\"Calculator\")) button3 = tk.Button(self, text=\"Go to Weather Page \", command=lambda: controller.show_frame(\"Weather\")) button.place(relx=0.45, rely=0.1, anchor=CENTER) button1.place(relx=0.5, rely=0.1, anchor=CENTER) button3.place(relx=0.55, rely=0.1, anchor=CENTER) class Weather(tk.Frame): def __init__(self, parent, controller): url = \"https://dor-error-1234.herokuapp.com/weather/Katowice?fbclid=IwAR2Rm6w1OOh6a7_ULdHhHjpbpZzYKnDiBZAwUQiB4njM-4a94JvBu4CcjFw\" response = urllib.request.urlopen(url) data = json.loads(response.read()) reg = json_normalize(data) reg = reg.to_string(index=False) tk.Frame.__init__(self, parent) final = tk.Label(self, text=reg, font=controller.title_font) final.place(relx=0.5, rely=0.2, anchor=CENTER) self.controller = controller label = tk.Label(self, text=\"Weather in Katowice\", font=controller.title_font) label.place(relx=0.5, rely=0.05, anchor=CENTER) button = tk.Button(self, text=\"Go to the start page\", command=lambda: controller.show_frame(\"StartPage\")) button1 = tk.Button(self, text=\"Go to Calculator\", command=lambda: controller.show_frame(\"Calculator\")) button2 = tk.Button(self, text=\"Go to To Do List\", command=lambda: controller.show_frame(\"ToDoList\")) button.place(relx=0.45, rely=0.1, anchor=CENTER) button1.place(relx=0.5, rely=0.1, anchor=CENTER) button2.place(relx=0.55, rely=0.1, anchor=CENTER) if __name__ == \"__main__\": app = SampleApp() app.mainloop()","title":"Code"},{"location":"opis/","text":"Programowanie zespo\u0142owe # Lista spotka\u0144: # 14.03.202 # Pierwsze spotkanie polega\u0142o na wymy\u015bleniu tematu projektu, szukaniu g\u0142\u00f3wnych materia\u0142\u00f3w, czego konkretnie mo\u017cemy potrzebowa\u0107 oraz u\u017cy\u0107. Ka\u017cdy z nas stara\u0142 si\u0119 do\u0142o\u017cy\u0107 cegie\u0142k\u0119 do zamys\u0142u projektu. Stwierdzili\u015bmy, \u017ce przed nast\u0119pnym spotkaniem, ka\u017cdy z nas indywidualnie poszuka dodatkowych materia\u0142\u00f3w i pomy\u015bli nad czym chcia\u0142by si\u0119 skupi\u0107 oraz zrobi\u0107 w projekcie. Wszystkie przydatne strony wysy\u0142ali\u015bmy na kanale Discord, kt\u00f3ry zosta\u0142 stworzony w celu realizacji tego projektu. 30.03.2022 # Na kolejnym spotkaniu dopi\u0119li\u015bmy wszystkie formalno\u015bci zwi\u0105zane z teoretycznymi zagadnieniami. Ka\u017cdy z nas powiedzia\u0142 czym konkretnie chcia\u0142by si\u0119 zaj\u0105\u0107 w projekcie. Na tej zasadzie podzielili\u015bmy si\u0119 obowi\u0105zkami. Przede wszystkim starali\u015bmy si\u0119 o ich r\u00f3wny podzia\u0142, \u017ceby nie by\u0142o sytuacji, w kt\u00f3rej jedna z os\u00f3b b\u0119dzie musia\u0142a zrobi\u0107 du\u017co wi\u0119cej ni\u017c inna. 11.04.2022 # Kolejno po dw\u00f3ch tygodniach pokazywali\u015bmy swoje efekty pracy oraz dzielili\u015bmy si\u0119 wiedz\u0105, ka\u017cdy z nas t\u0142umaczy\u0142 w jaki spos\u00f3b zrobi\u0142 konkretn\u0105 cz\u0119\u015b\u0107 kodu. Spotkanie mia\u0142o na celu om\u00f3wienie rzeczy, kt\u00f3re zaimplementowali\u015bmy i w razie jakich\u015b problem\u00f3w, wszyscy wsp\u00f3lnie pr\u00f3bowali\u015bmy znale\u017a\u0107 rozwi\u0105zanie. 25.04.2022 # W celu dalszego rozwoju projektu, cz\u0119\u015b\u0107 grupy musia\u0142a poczeka\u0107 a\u017c reszta doko\u0144czy implementacje swoich komponent\u00f3w. Omawiali\u015bmy w jaki spos\u00f3b chcemy po\u0142\u0105czy\u0107 aplikacj\u0119 oraz co powinno zosta\u0107 do niej jeszcze zmienione lub dodane. Tak jak przy poprzednich spotkaniach, omawiali\u015bmy efekty pracy i w razie problem\u00f3w starali\u015bmy si\u0119 rozwi\u0105zywa\u0107 je wsp\u00f3lnie. 09.05.2022 # Po wst\u0119pnej pr\u00f3bie po\u0142\u0105czenia wszystkich element\u00f3w w jedn\u0105 ca\u0142o\u015b\u0107, pojawi\u0142y si\u0119 pierwsze trudniejsze problemy do rozwi\u0105zania. Na tym spotkaniu starali\u015bmy si\u0119 uzgodni\u0107 co jest g\u0142\u00f3wnym czynnikiem, dla kt\u00f3rego nie byli\u015bmy w stanie tego zrobi\u0107. Na tym spotkaniu wszyscy wsp\u00f3lnie zacz\u0119li\u015bmy tworzy\u0107 dokumentacj\u0119 naszej aplikacji oraz opis przebiegu naszego projektu. 23.05.2022 # Na tym etapie aplikacja zosta\u0142a po\u0142\u0105czona w jedn\u0105 ca\u0142o\u015b\u0107, lecz nie spodziewali\u015bmy si\u0119 tego rodzaju b\u0142\u0119d\u00f3w, kt\u00f3re przysporzy\u0142y nam wiele problem\u00f3w i wszyscy wsp\u00f3lnie pr\u00f3bowali\u015bmy je rozwi\u0105za\u0107, co w efekcie da\u0142o nam dzia\u0142aj\u0105c\u0105 aplikacj\u0119 z paroma b\u0142\u0119dami, z kt\u00f3rymi walczyli\u015bmy, lecz nie by\u0142y one du\u017co \u0142atwiejsze w naprawie. 06.06.2022 # Na ostatnim spotkaniu wykonali\u015bmy finalne testy naszej aplikacji, starali\u015bmy si\u0119 sprawdzi\u0107 j\u0105 pod ka\u017cdym wzgl\u0119dem, niekt\u00f3re problemy niestety nie zosta\u0142y usuni\u0119te ze wzgl\u0119du na ich z\u0142o\u017cono\u015b\u0107. Nast\u0119pnie doko\u0144czyli\u015bmy dokumentacj\u0119, kt\u00f3ra by\u0142a czasoch\u0142onna oraz napisali\u015bmy plan projektu, gdy\u017c stwierdzili\u015bmy, \u017ce stworzymy go na sam koniec.","title":"Programowanie zespo\u0142owe"},{"location":"opis/#programowanie-zespoowe","text":"","title":"Programowanie zespo\u0142owe"},{"location":"opis/#lista-spotkan","text":"","title":"Lista spotka\u0144:"},{"location":"opis/#1403202","text":"Pierwsze spotkanie polega\u0142o na wymy\u015bleniu tematu projektu, szukaniu g\u0142\u00f3wnych materia\u0142\u00f3w, czego konkretnie mo\u017cemy potrzebowa\u0107 oraz u\u017cy\u0107. Ka\u017cdy z nas stara\u0142 si\u0119 do\u0142o\u017cy\u0107 cegie\u0142k\u0119 do zamys\u0142u projektu. Stwierdzili\u015bmy, \u017ce przed nast\u0119pnym spotkaniem, ka\u017cdy z nas indywidualnie poszuka dodatkowych materia\u0142\u00f3w i pomy\u015bli nad czym chcia\u0142by si\u0119 skupi\u0107 oraz zrobi\u0107 w projekcie. Wszystkie przydatne strony wysy\u0142ali\u015bmy na kanale Discord, kt\u00f3ry zosta\u0142 stworzony w celu realizacji tego projektu.","title":"14.03.202"},{"location":"opis/#30032022","text":"Na kolejnym spotkaniu dopi\u0119li\u015bmy wszystkie formalno\u015bci zwi\u0105zane z teoretycznymi zagadnieniami. Ka\u017cdy z nas powiedzia\u0142 czym konkretnie chcia\u0142by si\u0119 zaj\u0105\u0107 w projekcie. Na tej zasadzie podzielili\u015bmy si\u0119 obowi\u0105zkami. Przede wszystkim starali\u015bmy si\u0119 o ich r\u00f3wny podzia\u0142, \u017ceby nie by\u0142o sytuacji, w kt\u00f3rej jedna z os\u00f3b b\u0119dzie musia\u0142a zrobi\u0107 du\u017co wi\u0119cej ni\u017c inna.","title":"30.03.2022"},{"location":"opis/#11042022","text":"Kolejno po dw\u00f3ch tygodniach pokazywali\u015bmy swoje efekty pracy oraz dzielili\u015bmy si\u0119 wiedz\u0105, ka\u017cdy z nas t\u0142umaczy\u0142 w jaki spos\u00f3b zrobi\u0142 konkretn\u0105 cz\u0119\u015b\u0107 kodu. Spotkanie mia\u0142o na celu om\u00f3wienie rzeczy, kt\u00f3re zaimplementowali\u015bmy i w razie jakich\u015b problem\u00f3w, wszyscy wsp\u00f3lnie pr\u00f3bowali\u015bmy znale\u017a\u0107 rozwi\u0105zanie.","title":"11.04.2022"},{"location":"opis/#25042022","text":"W celu dalszego rozwoju projektu, cz\u0119\u015b\u0107 grupy musia\u0142a poczeka\u0107 a\u017c reszta doko\u0144czy implementacje swoich komponent\u00f3w. Omawiali\u015bmy w jaki spos\u00f3b chcemy po\u0142\u0105czy\u0107 aplikacj\u0119 oraz co powinno zosta\u0107 do niej jeszcze zmienione lub dodane. Tak jak przy poprzednich spotkaniach, omawiali\u015bmy efekty pracy i w razie problem\u00f3w starali\u015bmy si\u0119 rozwi\u0105zywa\u0107 je wsp\u00f3lnie.","title":"25.04.2022"},{"location":"opis/#09052022","text":"Po wst\u0119pnej pr\u00f3bie po\u0142\u0105czenia wszystkich element\u00f3w w jedn\u0105 ca\u0142o\u015b\u0107, pojawi\u0142y si\u0119 pierwsze trudniejsze problemy do rozwi\u0105zania. Na tym spotkaniu starali\u015bmy si\u0119 uzgodni\u0107 co jest g\u0142\u00f3wnym czynnikiem, dla kt\u00f3rego nie byli\u015bmy w stanie tego zrobi\u0107. Na tym spotkaniu wszyscy wsp\u00f3lnie zacz\u0119li\u015bmy tworzy\u0107 dokumentacj\u0119 naszej aplikacji oraz opis przebiegu naszego projektu.","title":"09.05.2022"},{"location":"opis/#23052022","text":"Na tym etapie aplikacja zosta\u0142a po\u0142\u0105czona w jedn\u0105 ca\u0142o\u015b\u0107, lecz nie spodziewali\u015bmy si\u0119 tego rodzaju b\u0142\u0119d\u00f3w, kt\u00f3re przysporzy\u0142y nam wiele problem\u00f3w i wszyscy wsp\u00f3lnie pr\u00f3bowali\u015bmy je rozwi\u0105za\u0107, co w efekcie da\u0142o nam dzia\u0142aj\u0105c\u0105 aplikacj\u0119 z paroma b\u0142\u0119dami, z kt\u00f3rymi walczyli\u015bmy, lecz nie by\u0142y one du\u017co \u0142atwiejsze w naprawie.","title":"23.05.2022"},{"location":"opis/#06062022","text":"Na ostatnim spotkaniu wykonali\u015bmy finalne testy naszej aplikacji, starali\u015bmy si\u0119 sprawdzi\u0107 j\u0105 pod ka\u017cdym wzgl\u0119dem, niekt\u00f3re problemy niestety nie zosta\u0142y usuni\u0119te ze wzgl\u0119du na ich z\u0142o\u017cono\u015b\u0107. Nast\u0119pnie doko\u0144czyli\u015bmy dokumentacj\u0119, kt\u00f3ra by\u0142a czasoch\u0142onna oraz napisali\u015bmy plan projektu, gdy\u017c stwierdzili\u015bmy, \u017ce stworzymy go na sam koniec.","title":"06.06.2022"}]}